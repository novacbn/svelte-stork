import{S as n,i as t,s,l as a,f as e,J as o,d as c,K as p}from"../chunks/vendor-5862df20.js";function r(n){let t,s;return{c(){s=a(),this.h()},l(n){s=a(),this.h()},h(){t=new p(s)},m(n,a){t.m('<h1>svelte-stork</h1>\n<h2>Description</h2>\n<p>Minimalist Svelte wrapper Stores around <a href="https://github.com/jameslittle230/stork">Stork Search</a>, also provides customizable Components.</p>\n<h2>Demo</h2>\n<p>See a demo of the Svelte Components at <a href="https://novacbn.github.io/svelte-stork">novacbn.github.io/svelte-stork</a>.</p>\n<h2>Getting Started</h2>\n<blockquote>\n<p><strong>NOTE</strong>: To learn how to build your own custom search indices and other concepts, visit the <a href="https://stork-search.net/docs">Stork documentation</a>.</p>\n</blockquote>\n<p>To get started with this library, you need to <a href="https://stork-search.net/docs/install">install Stork Search</a> on your Web Application. Alternatively, see the below sample on how to have this library handle that for you.</p>\n<h2>Usage</h2>\n<h3>Stores</h3>\n<pre class="language-javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span>initialize<span class="token punctuation">,</span> register<span class="token punctuation">,</span> search<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"svelte-stork"</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Before we can do anything with `search`, you need to</span>\n<span class="token comment">// initialize Stork Search</span>\n<span class="token keyword">await</span> <span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token comment">// If you want this library to handle mounting / loading</span>\n    <span class="token comment">// of the main Stork JS library after page load, you can</span>\n    <span class="token comment">// uncomment the following line</span>\n    <span class="token comment">//</span>\n    <span class="token comment">// script_url: "/path/to/stork.js",</span>\n\n    <span class="token comment">// The WASM blob is not optional however, due to how</span>\n    <span class="token comment">// Browsers handle loading them</span>\n    wasm_url<span class="token operator">:</span> <span class="token string">"/path/to/stork.wasm"</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Next, you need to register your search index with Stork Search</span>\n<span class="token keyword">await</span> <span class="token function">register</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token comment">// All search indices are globally registered to the webpage, so</span>\n    <span class="token comment">// you need to choose a unique name. Preferably versioned as well</span>\n    index_name<span class="token operator">:</span> <span class="token string">"my-search-index_v1.0.0"</span><span class="token punctuation">,</span>\n\n    <span class="token comment">// Make sure this path publically accessible</span>\n    index_url<span class="token operator">:</span> <span class="token string">"/path/to/search_index.v1.0.0.st"</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Now if we initialized and registered successfully, we can create the Svelte Store</span>\n<span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">search</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token comment">// You can customize how long in milliseconds the Store after</span>\n    <span class="token comment">// receiving input to update the query results</span>\n    <span class="token comment">//</span>\n    <span class="token comment">// DEFAULT: 250ms (0.25s)</span>\n    debounce<span class="token operator">:</span> <span class="token number">250</span><span class="token punctuation">,</span>\n\n    <span class="token comment">// You also need to reference your registered search index</span>\n    index_name<span class="token operator">:</span> <span class="token string">"my-search-index_v1.0.0"</span><span class="token punctuation">,</span>\n\n    <span class="token comment">// Lastly, you can customize the minimum amount of characters a</span>\n    <span class="token comment">// end-user needs to input before queries are performed</span>\n    <span class="token comment">//</span>\n    <span class="token comment">// DEFAULT: 3 (three characters)</span>\n    minimum_length<span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Like any other Svelte Store, we update the input query via `set`</span>\nstore<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"my search query"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Also subscriptions</span>\nstore<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">query</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token comment">// Finally retrieve your query results, visit the link below to see the typings</span>\n    <span class="token comment">// https://github.com/novacbn/svelte-stork/blob/afc328ca576f83a7c903027f0b117f5a1a566f12/src/lib/stores/search.ts#L115-L130</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>query<span class="token punctuation">.</span>results<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n<h3>Components</h3>\n<blockquote>\n<p><strong>NOTE</strong>: This sample expects initialization / registration of Stork Search was already performed.</p>\n</blockquote>\n\x3c!-- prettier-ignore --\x3e\n<pre class="language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n    <span class="token keyword">import</span> <span class="token punctuation">{</span>search<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"svelte-stork"</span><span class="token punctuation">;</span>\n    <span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> Stork <span class="token keyword">from</span> <span class="token string">"svelte-stork/components"</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// Just input the same options you passed into the Javascript sample</span>\n    <span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">search</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">let</span> value <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// After the initial configuration / load, it\'s really simple to get started. Just</span>\n    <span class="token comment">// use Svelte\'s reactive blocks pattern to update from input and listen for query results</span>\n    $<span class="token operator">:</span> $store <span class="token operator">=</span> value<span class="token punctuation">;</span>\n    $<span class="token operator">:</span> query <span class="token operator">=</span> $store<span class="token punctuation">;</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>...search<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">bind:</span>value</span> <span class="token punctuation">/></span></span>\n\n<span class="token comment">&lt;!--\n    Now we can just pass in the query output into the built-in basic search UI\n\n    Properties:\n        - `excerpts_maximum` / `results_maximum` â€” When set greater than `-1`, they limit the respective amount of\n        excerpts and results items displayed in search outputs\n--\x3e</span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Stork.Output</span>\n    <span class="token attr-name">excerpts_maximum</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>{-1}</span>\n    <span class="token attr-name">results_maximum</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>{-1}</span> \n    <span class="token attr-name">{query}</span>\n<span class="token punctuation">/></span></span>\n</code></pre>\n<h2>Developer</h2>\n<h3>Installation</h3>\n<p>Open your terminal and install via <code>npm</code>:</p>\n<pre class="language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> github:novacbn/svelte-stork<span class="token comment">#0.0.4</span>\n</code></pre>\n<p>Install current in-development code:</p>\n<pre class="language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> github:novacbn/svelte-stork\n</code></pre>\n<h3>Documentation</h3>\n<blockquote>\n<p>TODO</p>\n</blockquote>\n<h3>CSS Custom Properties</h3>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Default</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>--svst-attribution-color</code></td>\n<td><code>currentColor</code></td>\n</tr>\n<tr>\n<td><code>--svst-attribution-font-size</code></td>\n<td><code>0.8em</code></td>\n</tr>\n<tr>\n<td><code>--svst-attribution-padding</code></td>\n<td><code>0.5rem 1em</code></td>\n</tr>\n<tr>\n<td><code>--svst-attribution-opacity</code></td>\n<td><code>0.8</code></td>\n</tr>\n<tr>\n<td><code>--svst-attribution-text-decoration</code></td>\n<td><code>underline</code></td>\n</tr>\n<tr>\n<td><code>--svst-attribution-hover-opacity</code></td>\n<td><code>1</code></td>\n</tr>\n<tr>\n<td><code>--svst-attribution-link-color</code></td>\n<td><code>hsl(192, 82%, 44%)</code></td>\n</tr>\n<tr>\n<td><code>--svst-attribution-visited-color</code></td>\n<td><code>hsl(271, 63%, 34%)</code></td>\n</tr>\n<tr>\n<td><hr /></td>\n<td><hr /></td>\n</tr>\n<tr>\n<td><code>--svst-entry-color</code></td>\n<td><code>currentColor</code></td>\n</tr>\n<tr>\n<td><code>--svst-entry-cursor</code></td>\n<td><code>pointer</code></td>\n</tr>\n<tr>\n<td><code>--svst-entry-padding</code></td>\n<td><code>1em</code></td>\n</tr>\n<tr>\n<td><code>--svst-entry-text-decoration</code></td>\n<td><code>none</code></td>\n</tr>\n<tr>\n<td><code>--svst-entry-hover-background-color</code></td>\n<td><code>hsl(192, 82%, 78%)</code></td>\n</tr>\n<tr>\n<td><code>--svst-entry-hover-opacity</code></td>\n<td><code>1</code></td>\n</tr>\n<tr>\n<td><hr /></td>\n<td><hr /></td>\n</tr>\n<tr>\n<td><code>--svst-entry-title-spacing</code></td>\n<td><code>0.8em</code></td>\n</tr>\n<tr>\n<td><code>--svst-entry-title-font-size</code></td>\n<td><code>1.1em</code></td>\n</tr>\n<tr>\n<td><code>--svst-entry-title-font-weight</code></td>\n<td><code>bold</code></td>\n</tr>\n<tr>\n<td><hr /></td>\n<td><hr /></td>\n</tr>\n<tr>\n<td><code>--svst-excerpt-line-height</code></td>\n<td><code>1</code></td>\n</tr>\n<tr>\n<td><code>--svst-excerpt-spacing</code></td>\n<td><code>0.8em</code></td>\n</tr>\n<tr>\n<td><hr /></td>\n<td><hr /></td>\n</tr>\n<tr>\n<td><code>--svst-highlight-background-color</code></td>\n<td><code>hsl(59, 98%, 58%)</code></td>\n</tr>\n<tr>\n<td><hr /></td>\n<td><hr /></td>\n</tr>\n<tr>\n<td><code>--svst-message-color</code></td>\n<td><code>currentColor</code></td>\n</tr>\n<tr>\n<td><code>--svst-message-padding</code></td>\n<td><code>0.5em 1em</code></td>\n</tr>\n<tr>\n<td><code>--svst-message-font-size</code></td>\n<td><code>1em</code></td>\n</tr>\n<tr>\n<td><code>--svst-message-opacity</code></td>\n<td><code>0.8</code></td>\n</tr>\n<tr>\n<td><hr /></td>\n<td><hr /></td>\n</tr>\n<tr>\n<td><code>--svst-output-color</code></td>\n<td><code>black</code></td>\n</tr>\n<tr>\n<td><code>--svst-output-font-family</code></td>\n<td><code>-apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Roboto, Helvetica, Arial, sans-serif, &quot;Apple Color Emoji&quot;, &quot;Segoe UI Emoji&quot;</code></td>\n</tr>\n<tr>\n<td><code>--svst-output-font-size</code></td>\n<td><code>1em</code></td>\n</tr>\n<tr>\n<td><code>--svst-output-font-weight</code></td>\n<td><code>400</code></td>\n</tr>\n<tr>\n<td><code>--svst-output-max-height</code></td>\n<td><code>auto</code></td>\n</tr>\n<tr>\n<td><hr /></td>\n<td><hr /></td>\n</tr>\n<tr>\n<td><code>--svst-result-border</code></td>\n<td><code>1px solid hsla(0, 0%, 90%, 1)</code></td>\n</tr>\n<tr>\n<td><code>--svst-result-font-size</code></td>\n<td><code>0.8em</code></td>\n</tr>\n<tr>\n<td><hr /></td>\n<td><hr /></td>\n</tr>\n<tr>\n<td><code>--svst-results-border</code></td>\n<td><code>1px solid hsla(0, 0%, 80%, 1)</code></td>\n</tr>\n</tbody>\n</table>\n<h3>API</h3>\n<ul>\n<li>\n<p>Functions</p>\n<ul>\n<li><code>initalize</code></li>\n<li><code>register</code></li>\n</ul>\n</li>\n<li>\n<p>Stores</p>\n<ul>\n<li><code>search</code></li>\n</ul>\n</li>\n<li>\n<p>Components</p>\n<ul>\n<li>\n<p><code>Output</code></p>\n</li>\n<li>\n<p><code>Message</code></p>\n</li>\n<li>\n<p><code>Attribution</code></p>\n</li>\n<li>\n<p><code>Highlight</code></p>\n</li>\n<li>\n<p><code>Result</code></p>\n</li>\n<li>\n<p><code>Results</code></p>\n</li>\n<li>\n<p><code>Entry</code></p>\n</li>\n<li>\n<p><code>EntryTitle</code></p>\n</li>\n<li>\n<p><code>Excerpt</code></p>\n</li>\n</ul>\n</li>\n</ul>\n',n,a),e(n,s,a)},p:o,i:o,o:o,d(n){n&&c(s),n&&t.d()}}}export default class extends n{constructor(n){super(),t(this,n,null,r,s,{})}}
